(defwidget bar []
  (centerbox :orientation "v" :hexpand false
    (box :valign "start" :hexpand false :vexpand true :orientation "v" :space-evenly false
      (launch)
      (dashbutton)
      (powerbutton)
    )

    (workspaces :halign "center" :vexpand true :hexpand false :orientation "v")

    (box :valign "end" :hexpand false :vexpand true :orientation "v" :space-evenly false
      (battery)
      (wifi)
      (mem :thickness 4 :icon "")
      (cpu :thickness 4 :icon "")
      (disk :thickness 4 :icon "")
      (time)
    )
  )
)

(defpoll brightness :interval "999h" :initial 0 `brightnessctl -m | awk -F, '{print substr($4, 0, length($4)-1)}'`)
(defpoll volume :interval "999h" :initial 0 `pamixer --get-volume`)
(defpoll micvolume :interval "999h" :initial 0 `pamixer --get-volume --source 1`)
(defwidget dashboard []
  (box :orientation "v" 
    (box :class "info_box" :orientation "v" :space-evenly false
      (box :class "calendar_box"
        (calendar :width 200 :class "cal")
      )

      (box :class "slider_box" :orientation "v" :vexpand false :hexpand false
        (box :space-evenly false
            (label :class "slider_icon" :text "")
            (scale :min 1 :max 101 :width 315 :class "brightness_slider" :value brightness :onchange "brightnessctl set {}%" :height 10)
        )
        (box :space-evenly false
          (label :class "slider_icon" :text "墳")
          (scale :min 1 :max 101 :width 315 :class "volume_slider" :value volume :onchange "pamixer --set-volume $(echo {} | sed 's/[.].*$//')")
        )
        (box :space-evenly false
          (label :class "slider_icon" :text "")
          (scale :min 1 :max 101 :width 315 :class "micvolume_slider" :value micvolume :onchange "pamixer --set-volume $(echo {} | sed 's/[.].*$//') --source 1")
        )
      )
      (box :class "sysinfo_box" :orientation "h" :vexpand true :spacing 15 
        (mem :thickness 12 :icon "")
        (cpu :thickness 12 :icon "")
        (disk :thickness 12 :icon "")
      )
    )
    (box :class "notification_box"
    )     
  )
)




;; Variables
(defvar time false)
(defvar cal false)

;; ━━━ WIDGETS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

;; ━━━ MEMORY ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget dashbutton[]
  (button :class "reg-btn dashbutton" :onclick "eww open dashboard --toggle" "舘")
)



;; ━━━ MEMORY ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget mem [icon thickness]
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_RAM.used_mem_perc}
                        :class "membar"
                        :thickness {thickness}
                        :start-at 75

        (label :class "iconmem" :text {icon})
    )
  )
)

;; ━━━ CPU ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget cpu [icon thickness]
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_CPU.avg}
                        :class "cpubar"
                        :thickness {thickness}
                        :start-at 75

      (label :class "iconcpu" :text {icon})
    )
  )
)

;; ━━━ DISK ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget disk [icon thickness]
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_DISK["/"].used_perc}
                        :class "diskbar"
                        :thickness {thickness}
                        :start-at 75
      (label :class "icondisk" :text {icon})

    )
  )
)


;; ━━━ WIFI ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defvar wifi-info "{}")
(defpoll wifi :interval "30s" "./scripts/wifi.sh")

(defwidget wifi []
 (box :vexpand false :hexpand false :orientation "v"
   (label :text {wifi-info.icon}
          :limit-width 10
          :tooltip {wifi.status}
          :class "wifi"
    )
  )
)

;; ━━━ BATTERY ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defvar battery-info "{}")
(defpoll battery :interval "60s" "./scripts/battery.sh")

(defwidget battery []
   (label :text {battery-info.icon}
          :limit-width 10
          :tooltip "${battery.status}: ${battery.percent}"
          :class "battery"
  )
)


;; ━━━ VOLUME ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

(defvar volume-level 50)
(defvar volume-muted false)

(defwindow volume
  :monitor 0
  :geometry (geometry :y "100px" :x "0px" :width "250px" :height "200px" :anchor "center bottom")
  :windowtype "dock"
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text {volume-muted ? "" :
                    volume-level == 0 ? "" :
                    volume-level < 32 ? "" :
                    volume-level < 65 ? "" :
                    ""}

             :class 'volume-icon ${volume-muted ? "volume-icon-muted" : ""}'
      )
      (scale :class 'volume-slider ${volume-muted ? "volume-slider-muted" : ""}'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value volume-level
             :onchange "pamixer --set-volume {}"))))

;; ━━━ TIME ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defpoll hour :interval "10s" "date +%H")
(defpoll minute :interval "10s" "date +%M")
(defpoll dateVar :interval "600s" "date '+%A %d.%m.%y'")

(defwidget time []
  (eventbox :cursor "hand"  :hexpand false :vexpand false
                :tooltip "${dateVar}"
    (box :orientation "v" :hexpand false :vexpand false :space-evenly false :class "clock"
    (button		:class "date"
                :onclick ""	"${hour}")

    (button		:class "date"
                :onclick ""	"${minute}")
    )
  )
)




(defvar bright-level 50)
(defvar bright-muted false)
(defwindow brightness
  :monitor 0
  :geometry (geometry :y "-60px" :x "60px" :width "300px" :height "150px" :anchor "bottom left")
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text ""
             :class 'volume-icon'
      )
      (scale :class 'volume-slider'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value bright-level
             :onchange "brightnessctl set {}%"))))
(defwidget launch []
  (button		:class "reg-btn launchbutton"
                :hexpand true
                :onclick "wofi --show run --xoffset=1670 --yoffset=12 --width=230px --height=984 --style=$HOME/.config/wofi.css --term=footclient --prompt=Run &" "")
)

(defwidget powerbutton []
  (eventbox :cursor "hand"
  (button		:class "reg-btn powerbutton"
                :onclick "eww open powermenu --toggle &"	"")
  )
)
                                                  (defwidget powermenucontent []
                                                  (box :orientation "h"
  :class "powermenu-container"
  (box :class "shutdown-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Shutdown"
            :onclick "eww close powermenu && shutdown now"
      "⏻")
    )
  (box :class "reboot-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Reboot"
            :onclick "eww close powermenu && reboot"
      "")
    )
  (box :class "exit-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Suspend"
            :onclick "systemctl suspend"
      "")
    )
  )
)

(defwindow powermenu
  :monitor 0
  :geometry (geometry :x "0%"
  :y "0%"
  :width "30%"
  :height "15%"
  :anchor "center center")
  :wm-ignore true
  (powermenucontent))

(deflisten workspaces_listen "./scripts/workspaces.sh")
(defwidget workspaces []
  (literal :content workspaces_listen))

;; do a thing where you get window size
;;(defpoll windowsize :interval "999h" :initial 1080 `brightnessctl -m | awk -F, '{print substr($4, 0, length($4)-1)}'`)

(defwindow dashboard
  :monitor 0
  :geometry (geometry 
  :height "1600px" 
  :width "350px"
  :x "48px"
  :y "0px"
  :anchor "top left")
  :stacking "fg"
  :class "dashboard"
  (dashboard))

(defwindow bar
  :monitor 0
  :exclusive false 
  :geometry (geometry :height "1600" :x "-4px" :y "0px"
  :width "52px"
  :anchor "top left")
  :stacking "fg"
  (bar))



;; Created   by https://github.com/rxyhn
;; Designed  by https://github.com/rxyhn
;; Maintaned by https://github.com/rxyhn

;; put path to aesthetic bar config files here ;;
;; (defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/bar")
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;							Widget Section's							 ;;	
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Launcher Widgets ;;
;; (defwidget launcher []
;; 	(box :orientation "v" 
;; 		 :space-evenly "false" 
;; 		 :spacing -15
;;   	(button :class "launcher_icon" 
;; 		   	:onclick "scripts/popup launcher"  "")))
;;
;; ;; Workspaces Widgets ;;
;; (defwidget workspaces []
;; 	(literal :content workspace))
;; (deflisten workspace "scripts/workspace")
;;
;; ;; Battery Widgets ;;
;; (defwidget bat []
;; 	(box	:orientation "v"	
;; 			:space-evenly "false"
;; 	(label	:class "bat"		
;; 			:halign "end"		
;; 			:text battery	
;; 			:tooltip "Battery: ${battery-cappacity}%")))
;; (defpoll battery			:interval "1s"	"scripts/battery icon")
;; (defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")
;;
;; ;; Wifi Widgets ;;
;; (defwidget wifi []
;; 	(box		:orientation "v"  
;; 				:tooltip wifi-name
;; 	(button		:onclick "scripts/popup wifi" 
;; 				:class "wifi-icon" wifi-icon)))
;; (defpoll wifi-icon :interval "1s" "scripts/wifi icon")
;; (defpoll wifi-name :interval "1s" "scripts/wifi name")
;;
;; ;; Brightness Widgets ;;
;; (defwidget bright []
;;   (eventbox :onhover "${eww} update bright=true"   
;;   			:onhoverlost "${eww} update bright=false"
;;   			(box    :orientation "v"  
;; 			  		:space-evenly "false"  
;; 					:spacing 2
;;   			(revealer :transition "slideup" 
;; 			  		  :reveal bright   
;; 					  :duration "550ms"
;;   			(scale :class "bribar" 
;; 			  	   :value current-brightness 
;; 				   :tooltip "Brightness: ${current-brightness}%" 
;; 				   :onchange "brightnessctl set {}%" 
;; 				   :orientation "v" 
;; 				   :flipped true 
;; 				   :max 101 
;; 				   :min 0))
;;   			(label :class "brightness-icon" 
;; 			  	   :text ""))))
;; (defpoll current-brightness :interval "1s" "brightnessctl -m -d amdgpu_bl0 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
;; (defvar bright false)
;;
;; ;; Volume Widgets ;;
;; (defwidget volum []
;; 	(eventbox :onhover "${eww} update volum=true" 		
;; 			  :onhoverlost "${eww} update volum=false"
;; 	(box      :orientation "v" 	  
;; 			  :space-evenly "false" 
;; 			  :spacing "2"
;; 	(revealer :transition "slideup" 
;; 			  :reveal volum         
;; 			  :duration "550ms"
;; 	(scale    :class "volbar" 	  
;; 			  :value current-volume 
;; 			  :orientation "v"      
;; 			  :flipped true 
;; 			  :tooltip "Volume: ${current-volume}%" 
;; 			  :max 101 
;; 			  :min 0 
;; 			  :onchange "amixer -D pulse sset Master {}%" ))
;; 	(button   :onclick "scripts/popup audio"   :class "volume-icon" ""))))
;; (defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
;; (defvar volum false)
;;
;; ;; Control Panel Widgets ;;	
;; (defwidget control []
;; 	(box :orientation "v" 
;; 		 :space-evenly false  
;; 		 :class "control"
;; (bat)
;; (wifi)
;; (bright)
;; (volum)))
;;
;; ;; Clock Widgets ;;
;; (defwidget time []
;; 	(box	:orientation "v" 
;; 			:class "time" 
;; 			:valign "end"
;; 	(button	:onclick "scripts/popup calendar"	
;; 			:class "time-hour" hour)
;; 	(button	:onclick "scripts/popup calendar"	
;; 			:class "time-min"  min)))
;; (defpoll hour	:interval "1s"	"date '+%H'")
;; (defpoll min	:interval "1s"	"date '+%M'")
;;
;; ;; Calendar Widgets ;;
;; (defwidget cal []
;; 	(box :class "cal-box" 
;; 		 :orientation "v"
;; 	(box :class "cal-inner-box"
;; 	(calendar :class "cal" 
;; 			  :day calendar_day 
;; 			  :month calendar_month 
;; 			  :year calendar_year))))
;; (defpoll calendar_day :interval "10h"
;;     "date '+%d'")
;; (defpoll calendar_month :interval "10h"
;;     "scripts/calendar")
;; (defpoll calendar_year :interval "10h"
;;     "date '+%Y'")
;;
;; ;; Powermenu Widgets ;;
;; (defwidget power []
;; 	(eventbox	:onhover "${eww} update power=true"	
;; 				:onhoverlost "${eww} update power=false" 
;; 	(box		:orientation "v"					
;; 				:space-evenly "false" 	 
;; 				:vexpand "false" 	
;; 				:class "powermenu"
;; 	(revealer	:transition "slideup"				
;; 				:reveal power			 
;; 				:duration "550ms"
;; 	(box		:orientation "v"					
;; 				:space-evenly "false"
;;
;; 	(button   	:class "button-bspres"  			
;; 				:tooltip "BSPWM Restart" 
;; 				:onclick "bspc wm -r" "" )
;;
;;   	(button		:class "button-reb"					
;; 	  			:tooltip "Reboot"		 
;; 				:onclick "reboot"	"")
;;
;; 	(button		:class "button-quit" 				
;; 				:tooltip "Logout" 		 
;; 				:onclick "killall bspwm" "")
;;
;; 	(button		:class "button-lock" 				
;; 				:tooltip "Lock Screen"	 
;; 				:onclick "betterlockscreen -l"	"")))
;;
;; 	(button		:class "button-off"					
;; 				:tooltip "Shutdown"		 
;; 				:onclick "shutdown now"	""))))
;; (defvar power false)
;;
;; ;; Top Widgets ;;
;; (defwidget top []
;; 	(box	:orientation "v" 
;; 			:space-evenly "false" 
;; 			:valign "start" 
;; (launcher)
;; (workspaces)))
;;
;; ;; Bottom Widgets ;;
;; (defwidget bottom []
;; 	(box	:orientation "v" 
;; 			:space-evenly false 
;; (time)
;; (power)))
;;
;; ;; End Widgets ;;
;; (defwidget end []
;; 	(box :orientation "v" 
;; 		 :space-evenly "false" 
;; 		 :valign "end" 
;; 		 :spacing 5
;; (control)
;; (bottom)))
;;
;; ;; Bar Widgets ;;
;; (defwidget bar []
;; 	(box :class "eww_bar" 
;; 		 :orientation "v" 
;; 		 :vexpand "false" 
;; 		 :hexpand "false"
;; (top)
;; (end)))
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;							Window Section's							 ;;	
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Bar Windows ;;
;; (defwindow bar
;; 	:geometry (geometry :x "0" 
;; 						:y "0" 
;; 						:height "100%" 
;; 						:width "47px")
;; 	:monitor 0
;; 	:reserve (struts :distance "35px" 
;; 					 :side "left")
;; 	:wm-ignore false
;; 	:hexpand "false"
;; 	:vexpand "false"
;; (bar))
;;
;; ;; Calendar Windows ;;
;; (defwindow calendar
;; 	:geometry (geometry :x "70px" 
;; 						:y "65%" 
;; 						:width "270px" 
;; 						:height "60px")
;; (cal))
;;
;;
;;
;;
;;
